name: Daily Pipeline

on:
  schedule:
    - cron: "0 22 * * *"  # UTC 22:00 = KST 07:00
  workflow_dispatch:
    inputs:
      dry_run:
        description: "드라이 런"
        required: true
        default: "true"

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ✅ Python 환경 설정
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Show pip cache dir
        run: |
          python -m site
          python - << 'PY'
            import os
            print("PIP_CACHE_DIR =", os.getenv("PIP_CACHE_DIR"))
          PY
          python -m pip cache dir ||true
        shell: bash

      - name: Install dependencies
        run: |
          set -e
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          # 확인용(선택)
          python -m pip cache info ||true
        shell: bash

      - name: Install fonts (for plots)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum fonts-noto-cjk
          fc-list | grep -i -E "Nanum|Noto|CJK" || true
          fc-cache -f -v
        shell: bash

      # ✅ Module A - Fetch & Preprocess
      - name: Module A - Fetch & Preprocess
        env:
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          DRY_RUN: ${{ inputs.dry_run }}
        run: |
          source .venv/bin/activate
          python src/module_a.py
        shell: bash
      
      # ✅ Check A - Validate Output
      - name: Check A - Validate Output
        run: |
          source .venv/bin/activate
          # 파일 존재 여부 확인
          if ! ls data/news_clean_*.json 1> /dev/null 2>&1 || ! ls data/news_meta_*.json 1> /dev/null 2>&1; then
            echo "필수 파일이 생성되지 않았습니다."
            exit 1
          fi

          # 파일 목록 출력
          ls data/

          # 검증 스크립트 실행
          python src/check_a.py
        shell: bash
        
      # ✅ 워크플로우에 '누적+커밋' 스텝 추가
      - name: Warehouse Append
        run: |
          source .venv/bin/activate
          python src/warehouse_append.py
        shell: bash

      - name: Commit & Push Warehouse
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/warehouse
          git commit -m "chore: warehouse append $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "no changes"
          git pull --rebase --autostash origin ${{ github.ref_name }} || true
          git push origin HEAD:${{ github.ref_name }} || true
        shell: bash
        
      # ✅ Module B 실행 및 검증 단계
      - name: Module B - Keywords
        run: |
          source .venv/bin/activate
          python src/module_b.py
        shell: bash
      
      - name: Check B - Validate Keywords
        run: |
          source .venv/bin/activate
          python src/check_b.py
        shell: bash
      
      # ✅ Module C 실행 및 검증 단계
      - name: Module C - Topics/Timeseries/Insight
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          source .venv/bin/activate
          python src/module_c.py
        shell: bash

      - name: Check C - Validate Insights
        run: |
          source .venv/bin/activate
          python src/check_c.py
        shell: bash
        
      # ✅ Module D 실행 및 검증 단계
      - name: Module D - Biz Opportunities
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          source .venv/bin/activate
          python src/module_d.py
        shell: bash
      
      - name: Check D - Validate Biz Opportunities
        run: |
          source .venv/bin/activate
          python src/check_d.py
        shell: bash

      # ✅ Module E 실행 및 검증 단계
      - name: Module E - Build Report
        run: |
          source .venv/bin/activate
          python src/module_e.py
        shell: bash
      
      - name: Check E - Validate Report
        run: |
          source .venv/bin/activate
          python src/check_e.py
        shell: bash

      # ✅ Commit & Push Outputs 단계
      - name: Commit & Push outputs
        run: |
          set -e
          export TZ=Asia/Seoul
          ts=$(date +'%Y%m%dT%H%M%S')KST   # 예: 20250904T223755KST
          
          # 일자별 폴더 생성
          mkdir -p outputs/daily/$ts/fig
          mkdir -p outputs/daily/$ts/debug 

          # 리포트/분석 산출물 복사
          cp outputs/topics.json             outputs/daily/$ts/ || true
          cp outputs/trend_timeseries.json   outputs/daily/$ts/ || true
          cp outputs/trend_insights.json     outputs/daily/$ts/ || true
          cp outputs/keywords.json           outputs/daily/$ts/ || true
          cp outputs/biz_opportunities.json  outputs/daily/$ts/ || true
          cp outputs/report.md               outputs/daily/$ts/ || true
          cp outputs/report.html             outputs/daily/$ts/ || true

          # CSV 파일
          cp outputs/*.csv                   outputs/daily/$ts/ || true

          # 그림 복사
          cp outputs/fig/*.png               outputs/daily/$ts/fig/ || true

          # 디버그 덤프 복사 (사업기회 도출에 대한 LLM 출력 텍스트 파일)
          cp -r outputs/debug/*              outputs/daily/$ts/debug/ || true

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add outputs/daily
          git commit -m "chore: outputs $ts" || echo "no changes"

          git pull --rebase --autostash origin ${{ github.ref_name }} || true
          git push origin HEAD:${{ github.ref_name }} || true
        shell: bash
 
      # ✅ 아티팩트 업로드 (현재 주석 처리 상태)
#      - name: Upload Module A Artifacts
#        if: success()
#        uses: actions/upload-artifact@v4
#        with:
#          name: module-a
#          path: |
#            data/news_clean_*.json
#            data/news_meta_*.json
      
 #     - name: Upload Module B Artifact
 #       if: success()
 #       uses: actions/upload-artifact@v4
 #       with:
 #         name: module-b
 #         path: outputs/keywords.json
          
