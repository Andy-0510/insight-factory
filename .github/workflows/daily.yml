name: Daily Pipeline

permissions:
  contents: write

on:
  schedule:
    - cron: "0 21 * * *" # UTC 21:00 = KST 06:00
  workflow_dispatch:

concurrency:
  group: daily-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      USE_PRO: 'false' # 일간 작업은 PRO 모드 비활성화 권장
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      HF_HOME: ~/.cache/huggingface

    steps:
      # --- 체크아웃, 캐시, 의존성 설치 ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"
      - name: Cache HuggingFace models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hfmodels
          restore-keys: |
            ${{ runner.os }}-hfmodels
      - name: Install dependencies & Fonts
        run: |
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y fonts-nanum
      - name: Preflight | Check secrets
        run: |
          test -n "${{ secrets.GEMINI_API_KEY }}" || (echo "GEMINI_API_KEY 없음"; exit 1)
          if [ -z "${{ secrets.NAVER_CLIENT_ID }}" ] || [ -z "${{ secrets.NAVER_CLIENT_SECRET }}" ]; then
            echo "[WARN] NAVER API 키가 없습니다(옵션?)."
          fi

      # --- 일일 데이터 처리 및 분석 모듈 ---
      - name: Run Daily Data Processing
        env:
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        run: |
          python -m src.module_a
          python -m src.warehouse_append
          python -m scripts.fetch_article_bodies
          python -m src.module_b # Keywords
          python -m src.module_c # Topics (LLM 요약 제외 버전)
          python -m scripts.calculate_daily_sentiment
          python -m scripts.signal_export
          python -m scripts.select_top_articles

      # ▼▼▼▼▼▼ 웨어하우스에 메타 파일 커밋 ▼▼▼▼▼▼
      - name: Commit Latest Meta to Warehouse
        shell: bash
        run: |
          set -e
          LATEST_META=$(ls -t data/news_meta_*.json | head -n 1)
          if [ -f "$LATEST_META" ]; then
            DATE_KST=$(TZ=Asia/Seoul date +'%Y-%m-%d')
            TIME_KST=$(TZ=Asia/Seoul date +'%H%M%S')
            WAREHOUSE_DIR="data/warehouse/meta/${DATE_KST}"
            mkdir -p "${WAREHOUSE_DIR}"
            
            # 시간까지 포함된 파일명으로 복사하여 하루 여러 번 실행해도 덮어쓰지 않도록 함
            cp "$LATEST_META" "${WAREHOUSE_DIR}/news_meta_${TIME_KST}.json"
            
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "${WAREHOUSE_DIR}"
            git commit -m "chore(warehouse): add daily meta for ${DATE_KST}" || echo "No changes to commit"
            git pull --rebase
            git push
          else
            echo "[WARN] No news_meta file found to commit to warehouse."
          fi

      # --- 일간 리포트 생성 ---
      - name: Generate Daily Visuals & Report
        run: |
          python -m scripts.generate_visuals --report-type daily
          python -m src.module_f.daily_report

      # --- 결과물 아카이빙 및 커밋 ---
      - name: Archive and Commit Daily Outputs
        run: |
          set -e
          DATE_KST=$(TZ=Asia/Seoul date +'%Y-%m-%d')
          TIME_KST=$(TZ=Asia/Seoul date +'%H%M-KST')
          OUTDIR="outputs/daily/${DATE_KST}/${TIME_KST}"
          mkdir -p "${OUTDIR}/fig" "${OUTDIR}/export"
          cp outputs/report.* "${OUTDIR}/" || true # daily_report가 report.md로 생성
          cp -r outputs/export/* "${OUTDIR}/export/" || true
          cp -r outputs/fig/* "${OUTDIR}/fig/" || true
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "outputs/daily/${DATE_KST}"
          git commit -m "docs: daily report for ${DATE_KST}" || echo "No changes to commit"
          git pull --rebase
          git push
