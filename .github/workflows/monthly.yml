name: Monthly Report Pipeline

permissions:
  contents: write

on:
  schedule:
    - cron: "0 21 21-30 * 3" # 매월 21~30일 사이의 21:00 UTC = 다음날 06:00 KST (월말에 실행)
  workflow_dispatch:

jobs:
  build_monthly_report:
    runs-on: ubuntu-latest
    env:
      USE_PRO: 'true'
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      HF_HOME: ~/.cache/huggingface
      MONTHLY_RUN: "true" # 👈 월간 실행 모드 활성화

    steps:
      # --- 체크아웃, 캐시, 의존성 설치 ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"
      - name: Cache HuggingFace models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hfmodels
          restore-keys: |
            ${{ runner.os }}-hfmodels
      - name: Install dependencies & Fonts
        run: |
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y fonts-nanum

      - name: 🚀 Start Monthly Pipeline
        run: |
          echo "=================================================="
          echo "✅ 월간 파이프라인을 시작합니다."
          echo "실행 시간 (KST): $(TZ=Asia/Seoul date)"
          echo "PRO 모드 활성화: ${{ env.USE_PRO }}"
          echo "MONTHLY_RUN: true"
          echo "=================================================="
          
      - name: Preflight | Check secrets
        run: |
          test -n "${{ secrets.GEMINI_API_KEY }}" || (echo "GEMINI_API_KEY 없음"; exit 1)
          if [ -z "${{ secrets.NAVER_CLIENT_ID }}" ] || [ -z "${{ secrets.NAVER_CLIENT_SECRET }}" ]; then
            echo "[WARN] NAVER API 키가 없습니다(옵션?)."
          fi

      # --- 월간 리포트에 필요한 모든 모듈 실행 ---
      - name: 📊 Run Monthly Analysis & Reporting
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MONTHLY_RUN: "true" # 👈 이미 설정되어 있음
        run: |
          echo -e "\n--- STEP 1: 월간 데이터 집계 ---"
          python -m scripts.aggregate_monthly_data

          echo -e "\n--- STEP 2: 핵심 데이터 재분석 ---"
          python -m src.module_b
          python -m src.module_c

          echo -e "\n--- STEP 3: 기업/경쟁 및 미래 신호 분석 ---"
          python -m src.module_d
          python -m src.module_e
          python -m scripts.future_insights

          echo -e "\n--- STEP 4: 리스크 및 실행 계획 분석 ---"
          python -m src.module_g_risk
          python -m src.module_h_planning

          echo -e "\n--- STEP 5: 최종 리포트 생성 ---"
          python -m scripts.generate_visuals --report-type monthly
          python -m src.module_f.monthly_report
          
          echo "✅ 모든 월간 분석 및 리포트 생성 완료"
          
      - name: 📝 Log Monthly Results
        if: always()
        run: |
          echo "=================================================="
          echo "🏁 월간 파이프라인 실행 결과 요약"
          echo "=================================================="
          echo "- 집계된 기사 수: $(jq 'length' outputs/debug/monthly_meta_agg.json || echo 'N/A')"
          echo "- 신사업 아이디어 수: $(jq '.ideas | length' outputs/biz_opportunities.json || echo 'N/A')"
          echo "- 탐지된 리스크 수: $( (wc -l < outputs/export/risk_issues.csv 2>/dev/null || echo 1) | xargs -I {} expr {} - 1 )"
          echo "- 제안된 실행 계획 수: $( (wc -l < outputs/export/two_week_plan.csv 2>/dev/null || echo 1) | xargs -I {} expr {} - 1 )"
          echo "- 생성된 리포트: $(ls -1 outputs/monthly_report.md || echo '생성 실패')"
          echo "=================================================="
      
      # --- 결과물 아카이빙 및 커밋 ---
      - name: Archive and Commit Monthly Report
        shell: bash
        run: |
          set -e
          DATE_KST=$(TZ=Asia/Seoul date +'%Y-%m')
          OUTDIR="outputs/monthly/${DATE_KST}"
          mkdir -p "${OUTDIR}"
          cp outputs/monthly_report.md "${OUTDIR}/"
          cp outputs/monthly_report.html "${OUTDIR}/"
          cp outputs/fig/*.png "${OUTDIR}/" || true # 월간 리포트는 모든 이미지를 포함
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${OUTDIR}"
          git commit -m "docs: monthly report for ${DATE_KST}" || echo "No changes to commit"
          git pull --rebase
          git push