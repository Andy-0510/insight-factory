name: Monthly Report Pipeline

permissions:
  contents: write

on:
  schedule:
    - cron: "0 21 21-30 * 3" # 매월 21~30일 사이의 21:00 UTC = 다음날 06:00 KST (월말에 실행)
  workflow_dispatch:

jobs:
  build_monthly_report:
    runs-on: ubuntu-latest
    env:
      USE_PRO: 'true'
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      HF_HOME: ~/.cache/huggingface
      MONTHLY_RUN: "true" # 👈 월간 실행 모드 활성화

    steps:
      # --- 체크아웃, 캐시, 의존성 설치 ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"
      - name: Cache HuggingFace models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hfmodels
          restore-keys: |
            ${{ runner.os }}-hfmodels
      - name: Install dependencies & Fonts
        run: |
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y fonts-nanum

      - name: 🚀 Start Monthly Pipeline
        run: |
          echo "=================================================="
          echo "✅ 월간 파이프라인을 시작합니다."
          echo "실행 시간 (KST): $(TZ=Asia/Seoul date)"
          echo "PRO 모드 활성화: ${{ env.USE_PRO }}"
          echo "MONTHLY_RUN: true"
          echo "=================================================="
          
      - name: Preflight | Check secrets
        run: |
          test -n "${{ secrets.GEMINI_API_KEY }}" || (echo "GEMINI_API_KEY 없음"; exit 1)
          if [ -z "${{ secrets.NAVER_CLIENT_ID }}" ] || [ -z "${{ secrets.NAVER_CLIENT_SECRET }}" ]; then
            echo "[WARN] NAVER API 키가 없습니다(옵션?)."
          fi

      # --- 월간 리포트에 필요한 모든 모듈 실행 ---
      - name: 📊 Run Monthly Analysis & Reporting
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MONTHLY_RUN: "true" # 👈 이미 설정되어 있음
        run: |
          echo -e "\n--- STEP 1: 월간 데이터 집계 ---"
          python -m scripts.aggregate_monthly_data

          echo -e "\n--- STEP 2: 핵심 데이터 재분석 ---"
          echo -e "\n--- STEP 2-1_module_B ---"
          python -m src.module_b
          echo -e "\n--- STEP 2-2_module_C ---"
          python -m src.module_c
          echo -e "\n--- STEP 2-3_signal_export ---"
          python -m scripts.signal_export

          echo -e "\n--- STEP 3: 기업/경쟁 및 미래 신호 분석 ---"
          echo -e "\n--- STEP 3-1_module_D ---"
          python -m src.module_d
          echo -e "\n--- STEP 3-2_module_E ---"
          python -m src.module_e
          echo -e "\n--- STEP 3-3_future_insights ---"
          python -m scripts.future_insights

          echo -e "\n--- STEP 4: 리스크 및 실행 계획 분석 ---"
          echo -e "\n--- STEP 4-1_module_g_risk ---"
          python -m src.module_g_risk
          echo -e "\n--- STEP 4-2_module_h_planning ---"
          python -m src.module_h_planning

          echo -e "\n--- STEP 5: 최종 리포트 생성 ---"
          echo -e "\n--- STEP 5-1_generate_visuals ---"
          python -m scripts.generate_visuals --report-type monthly
          echo -e "\n--- STEP 5-2_module_f ---"
          python -m src.module_f.monthly_report
          
          echo "✅ 모든 월간 분석 및 리포트 생성 완료"
          
      - name: 📝 Log Monthly Results
        if: always()
        run: |
          echo "=================================================="
          echo "🏁 월간 파이프라인 실행 결과 요약"
          echo "=================================================="
          echo "- 집계된 기사 수: $(jq 'length' outputs/debug/monthly_meta_agg.json || echo 'N/A')"
          echo "- 신사업 아이디어 수: $(jq '.ideas | length' outputs/biz_opportunities.json || echo 'N/A')"
          echo "- 탐지된 리스크 수: $( (wc -l < outputs/export/risk_issues.csv 2>/dev/null || echo 1) | xargs -I {} expr {} - 1 )"
          echo "- 제안된 실행 계획 수: $( (wc -l < outputs/export/two_week_plan.csv 2>/dev/null || echo 1) | xargs -I {} expr {} - 1 )"
          echo "- 생성된 리포트: $(ls -1 outputs/monthly_report.md || echo '생성 실패')"
          echo "=================================================="
      
       # 일자별 아카이브(KST)
      - name: Prepare outputs monthly folder (KST)
        shell: bash
        run: |
          set -e
          DATE_KST=$(TZ=Asia/Seoul date +'%Y-%m-%d')
          TIME_KST=$(TZ=Asia/Seoul date +'%H%M-KST')
          OUTDIR="outputs/monthly/${DATE_KST}/${TIME_KST}"
          mkdir -p "${OUTDIR}/fig" "${OUTDIR}/debug" "${OUTDIR}/export"

          # 기본 결과 파일 복사 (json, html, md)
          cp outputs/*.json             "${OUTDIR}/" || true
          cp outputs/*.html             "${OUTDIR}/" || true
          cp outputs/*.md               "${OUTDIR}/" || true

          # 디버그 메타 파일들을 올바른 위치(debug/)에서 상위 폴더로 복사
          if [ -f outputs/debug/run_meta_b.json ]; then
            cp outputs/debug/run_meta_b.json "${OUTDIR}/"
          fi
          if [ -f outputs/debug/run_meta_c.json ]; then
            cp outputs/debug/run_meta_c.json "${OUTDIR}/"
          fi
          
          # 서브폴더 내용 전체 복사 (export, fig, debug)
          if [ -d outputs/export ]; then
            cp -r outputs/export/* "${OUTDIR}/export/" || true
          fi
          if [ -d outputs/fig ]; then
            cp -r outputs/fig/* "${OUTDIR}/fig/" || true
          fi
          if [ -d outputs/debug ]; then
            cp -r outputs/debug/* "${OUTDIR}/debug/" || true
          fi
          
          echo "OUTDIR=${OUTDIR}" >> $GITHUB_ENV

      # outputs 커밋/푸시
      - name: Archive and Commit Monthly Report
        shell: bash
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add outputs/monthly
          git commit -m "chore: outputs (KST rotation)" || echo "no changes"
          git pull --rebase --autostash origin ${{ github.ref_name }} || true
          git push origin HEAD:${{ github.ref_name }} || true